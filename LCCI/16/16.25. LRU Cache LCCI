import collections
class LRUCache:

    def __init__(self, capacity: int):
        self.dict=collections.OrderedDict()
        self.capacity=capacity
        self.count=0

    def get(self, key: int) -> int:
        if count==0 or key not in self.dict:
            return -1
        else:
            self.dict.move_to_end(key,last=False)
            return self.dict[key]

    def put(self, key: int, value: int) -> None:
        if key not in self.dict:
            if self.count==self.capacity:
                self.dict.popitem()
            else:
                self.count+=1
        self.dict[key]=value
        self.dict.move_to_end(key,last=False)
            


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
