class Solution:
    def intersection(self, start1: List[int], end1: List[int], start2: List[int], end2: List[int]) -> List[float]:
        vector1=[end1[0]-start1[0],end1[1]-start1[1]]
        vector2=[end2[0]-start2[0],end2[1]-start2[1]]
        if vector1[1]*vector2[0]==vector1[0]*vector2[1]:
            vector3=[start2[0]-start1[0],start2[1]-start1[1]]
            vector4=[end2[0]-end1[0],end2[1]-end1[1]]
            if vector1[1]*vector3[0]==vector1[0]*vector3[1]:
                if vector3[0]*vector4[0]+vector3[1]*vector4[1]>0:
                    return []
                else:
                    ls=[start1,end1,start2,end2]
                    ls.sort(key=lambda x:(x[0],x[1]))
                    return ls[1]
            else:
                return []
        else:
            a=(start2[0]*vector2[1]-start2[1]*vector2[0]-start1[0]*vector2[1]+start1[1]*vector2[0])/(vector1[0]*vector2[1]-vector1[1]*vector2[0])
            point=[start1[0]+a*vector1[0],start1[1]+a*vector1[1]]
            vector5=[point[0]-start1[0],point[1]-start1[1]]
            vector6=[point[0]-end1[0],point[1]-end1[1]]
            vector7=[point[0]-start2[0],point[1]-start2[1]]
            vector8=[point[0]-end2[0],point[1]-end2[1]]
            if vector5[0]*vector6[0]+vector5[1]*vector6[1]>0 or vector7[0]*vector8[0]+vector7[1]*vector8[1]>0:
                return []
            else:
                return point
