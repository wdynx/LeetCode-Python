class Solution:
    def isValidSudoku(self, board,m,n):
        def check(nums):
            showed=set()
            for num in nums:
                if num=='.':
                    continue
                if num in showed:
                    return False
                else:
                    showed.add(num)
            return True
        res=check(board[m])
        if not res:
            return False
        res=check([board[i][n] for i in range(9)])
        if not res:
            return False
        i=m//3*3+n//3
        res=check([board[i//3*3+j//3][i%3*3+j%3] for j in range(9)])
        if not res:
            return False
        return True
        
    def finished(self,board):
        for i in range(9):
            for j in range(9):
                if board[i][j]=='.':
                    return False
        return True
        
    def solveSudoku(self, board):
        """
        Do not return anything, modify board in-place instead.
        """
        if self.finished(board):
            return
        for i in range(9):
            for j in range(9):
                if board[i][j]=='.':
                    for k in range(1,10):
                        board[i][j]=str(k)
                        if self.isValidSudoku(board,i,j):
                            self.solveSudoku(board)
                            if self.finished(board):
                                return
                    board[i][j]='.'
                    return
