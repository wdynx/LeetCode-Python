class Solution:
    def binsearch(self,nums,target,left,right):
        if right-left<=3:
            return target in nums[left:right]
        if nums[left]==target or nums[right-1]==target:
            return True
        elif nums[left]>target or nums[right-1]<target:
            return False
        else:
            mid=(left+right)//2
            if nums[mid]==target:
                return True
            elif nums[mid]<target:
                return self.binsearch(nums,target,mid,right)
            else:
                return self.binsearch(nums,target,left,mid)
    def search(self, nums: List[int], target: int,left=-1,right=-1) -> bool:
        if left==right==-1:
            left=0
            right=len(nums)
        if right-left<=3:
            return target in nums[left:right]
        mid=(left+right)//2
        if nums[mid]>nums[left]:
            flag1=self.binsearch(nums,target,left,mid+1)
            flag2=self.search(nums,target,mid+1,right)
        elif nums[mid]<nums[right-1]:
            flag1=self.search(nums,target,left,mid+1)
            flag2=self.binsearch(nums,target,mid+1,right)
        else:
            flag1=self.search(nums,target,left,mid+1)
            flag2=self.search(nums,target,mid+1,right)
        return flag1 or flag2
