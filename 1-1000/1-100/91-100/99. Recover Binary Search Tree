# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        def iot(root,last,change):
            if not root:
                return
            iot(root.left,last,change)
            if last[0] and last[0].val>root.val:
                if change==[None,None]:
                    change[0]=last[0]
                    change[1]=root
                else:
                    change[-1]=root
            last[0]=root
            iot(root.right,last,change)
        last=[None]
        change=[None,None]
        iot(root,last,change)
        change[0].val,change[1].val=change[1].val,change[0].val   
