# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger:
#    def __init__(self, value=None):
#        """
#        If value is not specified, initializes an empty list.
#        Otherwise initializes a single integer equal to value.
#        """
#
#    def isInteger(self):
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        :rtype bool
#        """
#
#    def add(self, elem):
#        """
#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.
#        :rtype void
#        """
#
#    def setInteger(self, value):
#        """
#        Set this NestedInteger to hold a single integer equal to value.
#        :rtype void
#        """
#
#    def getInteger(self):
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        :rtype int
#        """
#
#    def getList(self):
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        :rtype List[NestedInteger]
#        """
class Solution:
    def deserialize(self, s: str) -> NestedInteger:
        stack = []
        _s=[]
        for i in s:
            if i == ']':
                _s.append(',')
            _s.append(i)
        _s.append(',')
        _s=''.join(_s)
        for i in _s:
            if i == ',':
                if isinstance(stack[-1],str):
                    store = []
                    while stack and isinstance(stack[-1],str) and (stack[-1].isdigit() or stack[-1] == '-'):
                        store.append(stack.pop())
                    if not store:
                        pass
                    else:
                        store.reverse()
                        stack.append(NestedInteger(int(''.join(store))))
                stack.append(',')
            elif i == ']':
                store = []
                while stack[-1] != '[':
                    store.append(stack.pop())
                    if store[-1] == ',':
                        store.pop()
                    cur = NestedInteger()
                    for item in store[::-1]:
                        cur.add(item)
                stack.pop()
                stack.append(cur)
            else:
                stack.append(i)
        # print(stack)
        return stack[0]
                
