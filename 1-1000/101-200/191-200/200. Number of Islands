class Solution:
    def BFS(self,grid,checked,i,j):
        if checked[i][j]==1:
            return
        checked[i][j]=1
        if i>0 and grid[i-1][j]=='1':
            self.BFS(grid,checked,i-1,j)
        if j>0 and grid[i][j-1]=='1':
            self.BFS(grid,checked,i,j-1)
        if i<len(grid)-1 and grid[i+1][j]=='1':
            self.BFS(grid,checked,i+1,j)
        if j<len(grid[0])-1 and grid[i][j+1]=='1':
            self.BFS(grid,checked,i,j+1)
    def numIslands(self, grid: List[List[str]]) -> int:
        checked=[[0]*len(grid[0]) for _ in range(len(grid))]
        count=0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if checked[i][j]==0 and grid[i][j]=='1':
                    count+=1
                    self.BFS(grid,checked,i,j)
        return count
