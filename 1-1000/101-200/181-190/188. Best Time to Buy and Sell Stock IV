import numpy as np
class Solution:
    def maxProfit(self, k: int, prices) -> int:
        if not prices:
            return 0
        cnt=0
        flag=0
        for i in range(1,len(prices)):
            if prices[i]>prices[i-1] and flag==0:
                cnt+=1
                flag=1
            if prices[i]<prices[i-1] and flag==1:
                flag=0
        if k>cnt:
            res=0
            for i in range(1,len(prices)):
                if prices[i]>prices[i-1]:
                    res+=prices[i]-prices[i-1]
            return res
        dp=-np.ones((len(prices),k+1,2),dtype=int)#天，已买入几次，是否持有，的利润
        #出价格，交易，是否持有
        for i in range(len(prices)):
            for j in range(k+1):
                for m in range(2):
                    if i==0:
                        if j==m:
                            dp[i,j,m]=0
                    else:
                        if m==0:#现在不持有，昨天就没买/刚卖的
                            dp[i,j,m]=max(dp[i-1,j,m],(dp[i-1,j,1-m]+prices[i]-prices[i-1]) if dp[i-1,j,1-m]>=0 else -1)
                        else:#现在持有，昨天就持有/刚买的
                            dp[i,j,m]=max((dp[i-1,j,m]+prices[i]-prices[i-1]) if dp[i-1,j,m]>=0 else -1,dp[i-1,j-1,1-m] if j>=1 and dp[i-1,j-1,1-m]>=0 else -1)
        # print(dp)
        return int(max(dp[-1,:,0]))
