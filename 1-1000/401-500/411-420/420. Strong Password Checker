class Solution:
    def strongPasswordChecker(self, s: str) -> int:
        len_change = (len(s)-6) if len(s)<6 else (len(s)-20) if len(s)>20 else 0
        dic = {'digit': 0, 'upper': 0, 'lower': -1}
        repeat = []
        cnt = 0
        last = '-'
        _s = s+'*'
        for i in _s:
            if i == last:
                cnt += 1
            else:
                if cnt>=3:
                    repeat.append((last, cnt))
                cnt = 1
                last = i
            if i.isdigit():
                dic['digit']+=1
            elif i.isupper():
                dic['upper']+=1
            else:
                dic['lower']+=1
        cat_res = list(dic.values()).count(0)
        # print(repeat)
        # print(dic)
        # print(len_change)
        if len_change == 0:
            res = 0
            for item in repeat:
                res += item[1]//3
            res = max(res, cat_res)
            return res
        elif len_change < 0:
            len_res = -len_change
            res = max(len_res, cat_res)
            return res
        else:
            mod_dic = {0: 0, 1: 0, 2: 0}
            for item in repeat:
                mod_dic[item[1]%3] = mod_dic[item[1]%3] + 1
            print(mod_dic)
            res = 0
            for item in repeat:
                res += item[1]//3
            # print(res)
            del_res = 0
            for item in mod_dic.items():
                del_res += (item[0]+1)*item[1]
            # print(del_res)
            if del_res <= len_change:
                res -= sum(mod_dic.values()) + (len_change-del_res)//3
                return len_change + max(res, cat_res)
            else:
                if len_change <= mod_dic[0]:
                    res -= len_change
                    return len_change + max(res, cat_res)
                else:
                    del_res -= mod_dic[0]
                    len_change -= mod_dic[0]
                    if len_change <= mod_dic[1]*2:
                        res -= len_change//2
                        return len_change + max(res, cat_res)
                    else:
                        del_res -= mod_dic[1]
                        len_change -= mod_dic[1]*2
                        res -= len_change//3
                        return len_change + max(res, cat_res)
